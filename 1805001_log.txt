Line 1 : type_specifier : INT

int

Line 1 : type_specifier : INT

int

Line 1 : parameter_list : type_specifier ID

int a

Line 1 : type_specifier : FLOAT

float

Line 1 : parameter_list : parameter_list COMMA type_specifier ID

int a,float b

Line 1 : type_specifier : INT

int

Line 1 : parameter_list : parameter_list COMMA type_specifier ID

int a,float b,int c

Line 3 : compound_statement : LCURL RCURL

{}

ScopeTable# 1.1
0 --> < b : ID >
1 --> < c : ID >
6 --> < a : ID >

ScopeTable# 1

Line 3 : func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int func(int a,float b,int c){}

Line 3 : unit : func_definition

int func(int a,float b,int c){}

Line 3 : program : unit

int func(int a,float b,int c){}

Line 5 : type_specifier : INT

int

Line 6 : type_specifier : INT

int

Line 6 : declaration_list : ID

a

Line 6 : var_declaration : type_specifier declaration_list SEMICOLON

int a;

Line 6 : statement : var_declaration

int a;

Line 6 : statements : statement

int a;

Line 7 : type_specifier : FLOAT

float

Line 7 : declaration_list : ID

b

Line 7 : var_declaration : type_specifier declaration_list SEMICOLON

float b;

Line 7 : statement : var_declaration

float b;

Line 7 : statements : statements statement

int a;
float b;

Line 8 : variable : ID

a

Line 8 : factor : variable

a

Line 8 : unary_expression : factor

a

Line 8 : term : unary_expression

a

Line 8 : simple_expression : simple_expression

a

Line 8 : rel_expression : simple_expression

a

Line 8 : logic_expression : rel_expression

a

Line 8 : arguments : logic_expression

a

Line 8 : variable : ID

b

Line 8 : factor : variable

b

Line 8 : unary_expression : factor

b

Line 8 : term : unary_expression

b

Line 8 : simple_expression : simple_expression

b

Line 8 : rel_expression : simple_expression

b

Line 8 : logic_expression : rel_expression

b

Line 8 : arguments : arguments COMMA logic_expression

a,b

Line 8 : variable : ID

a

Line 8 : factor : variable

a

Line 8 : unary_expression : factor

a

Line 8 : term : unary_expression

a

Line 8 : simple_expression : simple_expression

a

Line 8 : rel_expression : simple_expression

a

Line 8 : logic_expression : rel_expression

a

Line 8 : arguments : arguments COMMA logic_expression

a,b,a

Line 8 : argument_list : arguments

a,b,a

Line 8 : factor : ID LPAREN argument_list RPAREN

func(a,b,a)

Line 8 : unary_expression : factor

func(a,b,a)

Line 8 : term : unary_expression

func(a,b,a)

Line 8 : simple_expression : simple_expression

func(a,b,a)

Line 8 : rel_expression : simple_expression

func(a,b,a)

Line 8 : logic_expression : rel_expression

func(a,b,a)

Line 8 : expression : logic_expression

func(a,b,a)

Line 8 : expression_statement : expression SEMICOLON 

func(a,b,a);

Line 8 : statement : expression_statement

func(a,b,a);

Line 8 : statements : statements statement

int a;
float b;
func(a,b,a);

Line 9 : compound_statement : LCURL statements RCURL

{
int a;
float b;
func(a,b,a);
}

ScopeTable# 1.2
0 --> < b : ID >
6 --> < a : ID >

ScopeTable# 1
0 --> < func : ID >

Line 9 : func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int a;
float b;
func(a,b,a);
}

Line 9 : unit : func_definition

int main(){
int a;
float b;
func(a,b,a);
}

Line 9 : program : program unit

int func(int a,float b,int c){}
int main(){
int a;
float b;
func(a,b,a);
}

Line 9 : program : program



ScopeTable# 1
0 --> < func : ID >
5 --> < main : ID >

Total lines: 9
Total errors: 0